import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";

export async function POST(request: NextRequest) {
  try {
    console.log("Reply route called");
    const { annotationId, content, addedBy, addedByName } =
      await request.json();

    console.log("Creating annotation reply:", {
      annotationId,
      content,
      addedBy,
      addedByName,
    });

    if (!annotationId || !content || !addedBy) {
      console.log("Missing required fields");
      return NextResponse.json(
        { status: "error", message: "Missing required fields" },
        { status: 400 }
      );
    }

    // Test Prisma connection
    console.log("Testing Prisma connection...");
    const annotation = await prisma.annotation.findUnique({
      where: { id: annotationId },
      include: {
        project: true,
      },
    });

    if (!annotation) {
      console.log("Annotation not found:", annotationId);
      return NextResponse.json(
        { status: "error", message: "Annotation not found" },
        { status: 404 }
      );
    }

    console.log("Annotation found, creating reply...");

    // Create the reply in database
    const reply = await prisma.annotationReply.create({
      data: {
        annotationId,
        projectId: annotation.projectId,
        content,
        addedBy,
        addedByName: addedByName || addedBy,
      },
    });

    console.log("Reply created successfully:", reply);

    // Emit socket event for real-time updates
    try {
      console.log("Emitting socket event...");
      if (global.io) {
        global.io.to(`project-${annotation.projectId}`).emit("annotationReplyAdded", {
          projectId: annotation.projectId,
          annotationId,
          reply: {
            id: reply.id,
            content: reply.content,
            addedBy: reply.addedBy,
            addedByName: reply.addedByName,
            createdAt: reply.createdAt,
          },
          timestamp: new Date().toISOString(),
        });
        console.log("Socket event emitted successfully");
      } else {
        console.log("Socket.io server not available");
      }
    } catch (socketError) {
      console.log("Socket emission error:", socketError);
    }

    return NextResponse.json({
      status: "success",
      data: reply,
    });
  } catch (error) {
    console.error("Error creating annotation reply:", error);
    return NextResponse.json(
      { status: "error", message: "Failed to create reply" },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}